name: Enforce Cursorignore File in PRs

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master
      - duet
      - cocome

# 添加写权限
permissions:
  contents: write
  pull-requests: write

jobs:
  check-cursorignore:
    runs-on: ubuntu-latest
    # 只对以intl-开头的仓库执行，并且只在合并到master、duet或cocome分支时执行
    if: ${{ startsWith(github.repository, 'intl-') && (github.base_ref == 'master' || github.base_ref == 'duet' || github.base_ref == 'cocome') }}
    steps:
      # 步骤1：检出目标分支（PR的基础分支）
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          fetch-depth: 1
          
      # 步骤2：检查目标分支是否已有.cursorignore文件
      - name: Check for .cursorignore file in base branch
        id: check_base
        run: |
          if [ -f ".cursorignore" ]; then
            echo "目标分支已存在.cursorignore文件"
            echo "base_has_file=true" >> $GITHUB_OUTPUT
          else
            echo "目标分支缺少.cursorignore文件"
            echo "base_has_file=false" >> $GITHUB_OUTPUT
          fi
          
      # 步骤3：如果目标分支已有.cursorignore文件，则通过检查
      - name: Skip check if base already has file
        if: steps.check_base.outputs.base_has_file == 'true'
        run: echo "✅ 目标分支已包含.cursorignore文件，无需检查PR"
          
      # 步骤4：如果目标分支没有.cursorignore文件，则检查PR中是否添加了该文件
      - name: Checkout PR if base doesn't have file
        if: steps.check_base.outputs.base_has_file != 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 1
          
      # 步骤5：检查PR是否包含.cursorignore文件
      - name: Check for .cursorignore file in PR
        if: steps.check_base.outputs.base_has_file != 'true'
        id: check_pr
        run: |
          if [ -f ".cursorignore" ]; then
            echo "PR包含.cursorignore文件"
            echo "pr_has_file=true" >> $GITHUB_OUTPUT
          else
            echo "PR缺少.cursorignore文件"
            echo "pr_has_file=false" >> $GITHUB_OUTPUT
          fi
      
      # 步骤6：如果目标分支和PR中都没有.cursorignore文件，则自动创建并提交该文件
      - name: Auto-create and commit .cursorignore file if missing
        if: steps.check_base.outputs.base_has_file != 'true' && steps.check_pr.outputs.pr_has_file != 'true'
        run: |
          # 直接使用templates目录中的.cursorignore模板文件
          cp templates/.cursorignore .cursorignore
          
          # 设置Git配置
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions Bot"
          
          # 使用GitHub token进行推送
          git add .cursorignore
          git commit -m "自动添加 .cursorignore 文件"
          
          # 使用GitHub token进行身份验证来推送更改
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push origin HEAD:${{ github.event.pull_request.head.ref }}
          
          echo "✅ 已自动创建并提交 .cursorignore 文件到PR"
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          
      # 步骤7：如果PR添加了.cursorignore文件，显示成功消息
      - name: Success message if PR adds required file
        if: steps.check_base.outputs.base_has_file != 'true' && steps.check_pr.outputs.pr_has_file == 'true'
        run: echo "✅ PR添加了必需的.cursorignore文件，检查通过" 